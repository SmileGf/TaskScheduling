常用注解：

@EnableAutoConfiguration    开启自动配置

@Configuration : 用java代码的形式实现spring中xml配置文件配置的效果

@ComponentScan              指明对象扫描范围,默认指扫描当前启动类所在的包里的对象
    @ComponentScan(basePackageClasses＝要扫描类.class所在位置的包)  意思是要扫描哪个类所在的包

@SpringbootApplication  = @Configuration + @EnableAutoConfiguration + @ComponentScan

@Profiles                   提供了一种隔离应用程序配置的方式，并让这些配置只能在特定的环境下生效

@Resource   默认按照名称方式进行bean匹配   @Autowired     默认按照类型方式进行bean匹配,使用名称装配，配合@Qualifier注解
@Resource(import javax.annotation.Resource;)是J2EE(1.6)的注解   @Autowired( import org.springframework.beans.factory.annotation.Autowired;)是Spring的注解

@ControllerAdvice：  包含@Component。可以被扫描到。统一处理异常。

@ExceptionHandler（Exception.class）： 用在方法上面表示遇到这个异常就执行以下方法。

@value      注解来读取application.properties里面的配置

@Component：泛指组件，当组件不好归类时，可以使用这个注解进行标注。一般公共的方法会用上这个注解

@ResponseBody：表示该方法的返回结果直接写入HTTP response body中一般在异步获取数据时使用

@RequestMapping: 返回值通常解析为跳转路径，加上@Responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。如异步获取json数据，加上@Responsebody直接返回json数据。

@RequestParam：用在方法的参数前面

@PathVariable: 路径变量注解，其参数与大括号里的名字一样要保持一致

@Inject：等价于默认的@Autowired，只是没有required属性

@Bean:  相当于XML中的,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理

@AutoWired：自动导入依赖的bean。byType方式  required=false 时 就算找不到bean也不报错。

@Qualifier：当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用

@Resource(name="name",type="type")：没有括号内内容的话，默认byName

@ContextConfiguration 用来指定加载的Spring配置文件的位置,会加载默认配置文件.注解有以下两个常用的属性：
    locations：可以通过该属性手工指定 Spring 配置文件所在的位置，可以指定一个或多个 Spring 配置文件,逗号分隔。
    inheritLocations：是否要继承父测试用例类中的 Spring 配置文件，默认为 true

日志：
# 日志配置
# logging:
#  config: classpath:logback.xml
#  level:
#    cn.com.cj: DEBUG   # 日志级别控制前缀，*为包名或Logger名  选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF

